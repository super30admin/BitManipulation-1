//TimeComplexity.   O(2n)
//Spacecomplexity.  O(1)

class Solution {
    public int[] singleNumber(int[] nums) {
        
        int result = 0;
        
        //Find xor of both numbers
        
        for(int i = 0; i < nums.length; i++){
            result ^= nums[i];
        }
        
  
        
        //Find first bit set of xor value because at that position the numbers have opposite bits 
        //i.e num 1 has 0 and num 2 has 1
        
        int set_bit = 0;
        
        for(int i = 0 ; i < 32; i++){
            
            set_bit = 1 << i;
            
            if((result & set_bit) != 0){
               
                break;
            }
            
                  
            
        }
        
        //set_bit and num in nums  gives either 0 Or 1 based on the value at the set_bit position
        int num1 = 0;
        
        for(int num : nums){
           
            if((num & set_bit) != 0){
                num1 ^= num;
                
            }
        }
        
        return new int[] { num1 , num1 ^ result};

        
        
    }
}
