/***Approach 1 using HashSet
Time O(n)
Space O(n)
Leetcode Yes
Problem No
*******/
class Solution {
    public int singleNumber(int[] nums) {
        
        Set<Integer> set = new HashSet<>();
        
        for(int i =0 ; i<nums.length;i++)
        {
            if(set.contains(nums[i]))
                set.remove(nums[i]);
            else
                set.add(nums[i]);
        }
        
        for(int i : set)
            return i;     
        
        return 0;
    }
}

//Approach 2 using XOR
/***Time O(n) SpaceO(1) taking xor of all elements . for every duplicate element it will 0 and in the end we'll have our number
class Solution {
    public int singleNumber(int[] nums) {
        
        int result=0;
        for(int i =0 ; i<nums.length;i++)
        {
           result ^=nums[i];
        }
    
        
        return result;
    }
}
